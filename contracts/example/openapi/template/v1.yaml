openapi: 3.0.0
servers:
  - url: 'https://{env}-sg.portal.template.com'
    variables:
      env:
        enum:
          - dev
          - prod
        default: dev
  
info:
  description: >-
    This is a sample server Student info server. For this sample, you can use the api key
    `special-key` to test the authorization filters.
  version: 0.0.2
  title: OpenAPI student info
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: student
    description: Everything about your students
paths:
  /mutation-api/student-service/students:
    post:
      tags:
        - mutation-student
      summary: Add new student
      description: ''
      operationId: addstudent
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/StudentRequest'
      security:
        - student_auth: []
  /query-api/student-service/students:
    get:
      tags:
        - query-student
      summary: Get all students
      description: Returns all students
      operationId: getAllstudents
      parameters:
        - in: query
          name: firstName
          schema:
            type: string
        - in: query
          name: middleName
          schema:
            type: string
        - in: query
          name: lastName
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          required: false
          description: The number of students to skip before starting to collect the result set.
        - in: query
          name: count
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          required: false
          description: The number of students to return.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentCollection'
        '400':
          description: Invalid ID supplied
        '404':
          description: Student not found
  /query-api/student-service/students/{id}:
    get:
      tags:
        - query-student
      summary: Find student by ID
      description: Returns a single student
      operationId: get_student_by_id
      parameters:
        - name: id
          in: path
          description: ID of student to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Invalid ID supplied
        '404':
          description: Student not found
  /mutation-api/student-service/students/{id}:
    put:
      tags:
        - mutation-student
      summary: Update an existing student
      description: ''
      operationId: update_student
      parameters:
        - name: id
          in: path
          description: ID of student to update
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Invalid ID supplied
        '404':
          description: Student not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/StudentRequest'
      security:
        - student_auth: []
    delete:
      tags:
        - mutation-student
      summary: Deletes a student
      description: ''
      operationId: delete_student
      parameters:
        - name: id
          in: path
          description: ID of student to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: student not found
      security:
        - student_auth: []
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  requestBodies:
    StudentArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Student'
      description: List of student object
      required: true
    StudentRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Student'
      description: student object that needs to be added to the database
      required: true
  securitySchemes:
    student_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Student:
      title: Student
      description: Student info
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 53f549b9-99bf-4e12-88e3-c2f868953283
        polityId:
          type: string
          format: uuid
          example: 4d084b56-54e1-4bd2-878e-c52675497c2b
        saintId:
          type: string
          format: uuid
          example: 40e6215d-b5c6-4896-987c-f30f3678f608
        title:
          type: string
          example: PRIEST
        firstName:
          type: string
          example: Nguyen
        middleName:
          type: string
          example: Huu
        lastName:
          type: string
          example: Chien
        dateOfBirth:
          type: string
          pattern: '^\d{4}-\d{2}-\d{2}$'
          example: 1983-05-16
          description: date of birth in format YYYY-MM-DD
        placeOfBirth:
          type: string
          example: Tra Vinh
        email:
          type: string
          example: binh@sunrise.vn
        phone:
          type: string
          example: +84 1228019700
        schoolName:
          type: string
          example: Dai Chung Vien Thanh Quy - Can Tho
      xml:
        name: student
    StudentCollection:
      properties:
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
        hasMore:
          type: boolean
        total:
          type: integer
          format: int64

security:
  - student_auth: []
